/*
10未満の自然数のうち, 3 もしくは 5 の倍数になっているものは 3, 5, 6, 9 の4つがあり, これらの合計は 23 になる.
同じようにして, n 未満の 3 か 5 の倍数になっている数字の合計を求めよ.
処理には再帰を使用すること.
*/
pub fn p001(end: u64) -> u64 {
    (1..end).fold(0, |sum, x| if x % 3 == 0 || x % 5 == 0 { sum + x } else { sum })
}

/*
フィボナッチ数列の項は前の2つの項の和である. 最初の2項を 1, 2 とすれば, 最初の10項は以下の通りである.

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

数列の項の値が400万以下のとき, 値が偶数の項の総和を求めよ.
*/
pub fn p002(end: u64) -> u64 {
    let mut sum = 0;
    let mut a = 1;
    let mut b = 2;
    while b < end {
        if b % 2 == 0 {
            sum += b;
        }
        let c = a + b;
        a = b;
        b = c;
    }
    sum
}

/*
13195 の素因数は 5, 7, 13, 29 である.
600851475143 の素因数のうち最大のものを求めよ.
*/
pub fn p003(num: u64) -> u64 {
    let mut n = num;
    let mut i = 2;
    while i * i <= n {
        while n % i == 0 {
            n /= i;
        }
        i += 1;
    }
    n
}
